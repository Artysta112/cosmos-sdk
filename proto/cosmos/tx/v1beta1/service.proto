syntax = "proto3";
package cosmos.tx.v1beta1;

import "google/api/annotations.proto";
import "cosmos/base/abci/v1beta1/abci.proto";
import "cosmos/tx/v1beta1/tx.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/cosmos/cosmos-sdk/types/tx";

// Service defines a gRPC service for interacting with transactions.
service Service {
    // Simulate simulates executing a transaction for estimating gas usage.
    rpc Simulate(SimulateRequest) returns (SimulateResponse) {
        option (google.api.http).post = "/cosmos/tx/v1beta1/simulate";
    }
    // GetTx fetches a tx by hash.
    rpc GetTx(GetTxRequest) returns (GetTxResponse) {
        option (google.api.http).get = "/cosmos/tx/v1beta1/tx/{hash}";
    }
    

  // BroadcastTx broadcast transaction.
    rpc BroadcastTx(BroadcastTxRequest) returns (BroadcastTxResponse) {
            option (google.api.http).post = "/cosmos/tx/v1beta1/txs";
    }
}

// BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
// RPC method.
message BroadcastTxRequest {
    // tx is the list of queried transactions.
    bytes tx = 1;
    string mode = 2;
}

// BroadcastTxResponse is the response type for the
// Service.BroadcastTx method.
message BroadcastTxResponse {
  // Response code.
    uint32 code = 1;
      // Namespace for the Code
    string codespace = 2;
      // Result bytes, if any.
    string data = 3;
      // Amount of gas consumed by transaction.
    int64 gas_used = 4;
      // Amount of gas requested for transaction.
    int64 gas_wanted = 5;
  // The output of the application's logger (raw string). May be
  // non-deterministic.
    string raw_log = 6;
    // Time of the previous block. For heights > 1, it's the weighted median of
  // the timestamps of the valid votes in the block.LastCommit. For height == 1,
  // it's genesis time.
    string timestamp = 7;
      // Additional information. May be non-deterministic.
    string info = 8;
      // The block height
    int64 height = 9;
      // The request transaction bytes.
    cosmos.tx.v1beta1.Tx tx = 10;
      // The transaction hash.
    string txhash = 11 [(gogoproto.customname) = "TxHash"];

    repeated cosmos.base.abci.v1beta1.ABCIMessageLog logs = 12 [(gogoproto.nullable) = false];

}


// SimulateRequest is the request type for the Service.Simulate
// RPC method.
message SimulateRequest {
    // tx is the transaction to simulate.
    cosmos.tx.v1beta1.Tx tx = 1;
}
  
// SimulateResponse is the response type for the
// Service.SimulateRPC method.
message SimulateResponse {
    // gas_info is the information about gas used in the simulation.
    cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
    // result is the result of the simulation.
    cosmos.base.abci.v1beta1.Result result = 2;
}

// GetTx is the request type for the Service.GetTx
// RPC method.
message GetTxRequest {
    // hash is the tx hash to query, encoded as a hex string.
   string hash = 1;
}
  
// GetTxResponse is the response type for the Service.GetTx method.
message GetTxResponse {
    // tx is the queried transaction.
    cosmos.tx.v1beta1.Tx tx = 1;
}
